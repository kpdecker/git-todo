#!/usr/bin/env node

var _ = require('underscore'),
    async = require('async'),
    colors = require('colors'),
    github = require('../lib/github-scan'),
    local = require('../lib/local-scan'),
    optimist = require('optimist');

var mergedInfo = {};

var argv = optimist
    .usage('Scan scans local git repos and github for outstanding code\nUsage $0 [--config configFile] [--html] dirs')
    .demand('c')
    .alias('c', 'config')
    .default('c', getUserHome() + '/.config/git-todo')
    .boolean('h')
    .alias('h', 'html')
    .argv;

if (argv.html || !process.stdout.isTTY) {
  colors.mode = 'none';
}

async.parallel([
  function(callback) {
    var config = argv.config;
    config = config.replace(/^~\//, getUserHome() + '/');

    github(require(config), handler(callback));
  },
  function(callback) {
    var dirs = argv._.join(' ');
    local(dirs, handler(callback));
  }
],
function() {
  var outputCount = 0;

  _.each(_.keys(mergedInfo).sort(), function(name) {
    var status = mergedInfo[name],
        buffer = '';

    var NEWLINE = argv.html ? '<br>\n' : '\n';

    buffer += keys({
      'no-remote': !status.remote,
      'local-only-branch': status.localBranch && status.branch,
      ahead: status.ahead,
      behind: status.behind,
      stashes: status.stashes,
      issues: status.issues
    }, true);

    if (status.unmergedBranches) {
      var localOnlyBranches = _.filter(status.unmergedBranches, function(branch) { return branch.localBranch; }).length,
          aheadBranches = _.filter(status.unmergedBranches, function(branch) { return branch.ahead; }).length,
          unmerged = _.keys(status.unmergedBranches).length - localOnlyBranches - aheadBranches;

      header('Branch Status');
      buffer += keys({
        unmerged: unmerged,
        'local-only': localOnlyBranches,
        ahead: aheadBranches
      });
    }

    if (status.commits) {
      header('Commits since version');
      list(status.commits.map(function(commit) {
          return listItem(commit.sha, commit.message, commit.committer, 'https://github.com/' + status.name + '/commit/' + commit.sha);
        })
        .join('\n'));
    }
    if (status.pulls) {
      header('Open pull requests');
      list(_.map(status.pulls, function(pull) {
          return listItem('#' + pull.number, pull.message, pull.committer, 'https://github.com/' + status.name + '/pull/' + pull.number);
        })
        .join('\n'));
    }
    if (status.status) {
      var fileStatus = keys(status.status);

      if (fileStatus) {
        header('File Status');
        buffer += fileStatus;
      }
    }

    if (buffer) {
      outputCount++;

      if (argv.html) {
        console.log('<h2>' + status.name.blue + ': ' + (status.latest || '') + '</h2>');
      } else {
        console.log(status.name.blue + ': ' + (status.latest || ''));
      }
      if (status.path) {
        console.log('    ' + status.path + (argv.html ? '<br>' : ''));
      }
      console.log(buffer);
      console.log(argv.html ? '<br>' : '');
    }


    function header(text) {
      if (buffer) {
        buffer += '\n';
      }
      if (argv.html) {
        buffer += '<h3>' + text + '</h3>\n';
      } else {
        buffer += '  ' + text + ':\n';
      }
    }
    function list(content) {
      if (argv.html) {
        buffer += '<ul>\n' + content + '\n</ul>\n';
      } else {
        buffer += content + '\n';
      }
    }
    function listItem(title, message, committer, link) {
      title = column(title, 6).yellow;
      if (argv.html && link) {
        title = '<a href="' + link + '">' + title + '</a>';
      }

      var content = title + ' : '
              + column(message.replace(/\s/g, ' '), 50)
              + ' (@' + committer + ')';

      if (argv.html) {
        return '     <li>' + content + '</li>';
      } else {
        return '     ' + content;
      }
    }
    function keys(object, shallow) {
      var columnSize = _.keys(object).reduce(function(prev, value) { return Math.max(value.length, prev); }, 0);

      var list = _.compact(_.map(object, function(value, key) {
          if (value) {
            if (argv.html) {
              return '<dt>' + key + '</dt><dd>' + value + '</dd>';
            } else {
              if (value === true) {
                return key.yellow;
              } else {
                return column(key + ':', columnSize).yellow + ' ' + value;
              }
            }
          }
        }))
        .map(function(value) { return (shallow ? '  ' : '    ') + value + '\n'; })
        .join('');

      if (list && argv.html) {
        list = '<dl>\n' + list + '</dl>';
      }
      return list;
    }
  });

  if (outputCount) {
    console.log(outputCount + ' repositories with TODOs');
  }
});

function column(str, len) {
  str = str.substr(0, len);
  str += new Array(len + 1 - str.length).join(' ');
  return str;
}

function handler(callback) {
  return function(err, repos) {
    if (err) {
      console.log(err);
      throw err;
    }

    _.each(repos, function(info, name) {
      _.extend(mergedInfo[name] = mergedInfo[name] || {}, info);
    });

    callback();
  };
}

// http://stackoverflow.com/questions/9080085/node-js-find-home-directory-in-platform-agnostic-way
function getUserHome() {
  return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
}
